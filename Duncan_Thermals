import pandas as pd         
import visa, time    
from pymodbus.client.sync import ModbusSerialClient as ModbusClient
import struct

#Connect to Instruments
rm = visa.ResourceManager()
daq = rm.open_resource('ASRL1::INSTR')
client = ModbusClient(method = 'rtu' , port = 'COM9' , stopbits=1, parity ='N', baudrate='115200' ,timeout=0.5)
connection = client.connect()
#print(connection)

#FUNTIONS

def float32_to_bin(num):
    return bin(struct.unpack('!I', struct.pack('!f', num))[0])[2:].zfill(32)

def bin_to_float32(binary):
    return struct.unpack('!f',struct.pack('!I', int(binary, 2)))[0]

def dec_to_bin(msb,lsb):
    x=bin(int(msb))
    y=bin(int(lsb))
    return str(x)[2:18].zfill(16)+str(y)[2:18].zfill(16)

def dec_to_float32(msb,lsb):
    return bin_to_float32(dec_to_bin(msb, lsb))

def float32_to_msb(num):
    return int(float32_to_bin(num)[0:16],2)

def float32_to_lsb(num):
    return int(float32_to_bin(num)[16:32],2)

def measure():
    #Measure PD
    response = client.read_input_registers(5003,2,unit=1)
    print response.registers[0]
    print response.registers[1]
    PD=hex(int(response.registers[1]))
    temp['A_PD'] = PD
    
    #Measure SOC
    response = client.read_input_registers(5097,2,unit=1)
    SOC=dec_to_float32(response.registers[0], response.registers[1])
    temp['B_SOC'] = SOC
    
    #Measure Pac_Grid
    response = client.read_input_registers(5053,2,unit=1)
    Pac_Grid=dec_to_float32(response.registers[0], response.registers[1])
    temp['C_Pac_Grid'] = Pac_Grid
    
    #Measure Batt Vdc
    response = client.read_input_registers(5005,2,unit=1)
    Vdc=dec_to_float32(response.registers[0], response.registers[1])
    temp['D_Vdc'] = Vdc
    
    #Measure Iac_Ext
    response = client.read_input_registers(5021,2,unit=1)
    Iac_Ext=dec_to_float32(response.registers[0], response.registers[1])
    temp['E_Iac_Ext'] = Iac_Ext
    
    #Measure Vac_Out
    response = client.read_input_registers(5013,2,unit=1)
    Vac_Out=dec_to_float32(response.registers[0], response.registers[1])
    temp['E_Vac_Out'] = Vac_Out
    
    #Measure Choke1
    #daq.write('MEAS:TEMP? %s,%s,(%s)' % ('TCouple', 'K', '@113'))
    #time.sleep(0.5)
    #temp['F_Q102_Temp'] = float(daq.read())
    
    #Measure Choke2
    #Measure Trf1
    #Measure Trf2
    
results = pd.DataFrame()

while 1:
       
    time.sleep(10)   # Delay in seconds before capturing results
    temp = {}
    #measure()
    try:
        measure()
    except:
        try:
            print('measure error1')
            measure()
        except:
            print('measure error2')
            measure()
    
    results = results.append(temp, ignore_index=True)    # 17
    #print results
    print "%.2fV\t%.3fA" % (temp['A_PD'],temp['B_SOC'])    # ? on print formatting
    results.to_csv('Results.csv')               
print('finished')
